import fnmatch
import itertools
import os
import string

import matplotlib.pyplot as plt
from cycler import cycler

import args_parser


def find(pattern, path):
    result = []
    for root, dirs, files in os.walk(path):
        for name in files:
            if fnmatch.fnmatch(name, pattern):
                result.append(os.path.join(root, name))
    return result


def plot():

    """ Plot figures """
    plt.rcParams.update({
        "text.usetex": True,
        "font.family": "sans-serif",
        "font.size": 24,
        "font.sans-serif": ["Helvetica"],
    })

    i = 1
    skip_n = 1

    games = ['SIS', 'Buffet', 'Advertisement',]
    variants = ["fp", "fp", "fp",]
    num_disc_mfs = [50, 80, 120]
    stationary = True

    fig = plt.figure()
    for game, variant in zip(games, variants):

        clist = itertools.cycle(cycler(color='rbkgcmy'))
        linestyle_cycler = itertools.cycle(cycler('linestyle', ['-', '--', ':', '-.']))
        subplot = plt.subplot(2, 3, i)
        subplot.annotate('(' + string.ascii_lowercase[i - 1] + ')',
                         (0, 0),
                         xytext=(10, +32),
                         xycoords='axes fraction',
                         textcoords='offset points',
                         fontweight='bold',
                         color='black',
                         alpha=0.7,
                         backgroundcolor='white',
                         ha='left', va='top')
        # subplot.text(-0.01, 1.06, '(' + string.ascii_lowercase[i - 1] + ')', transform=subplot.transAxes, weight='bold')
        i += 1

        for num_disc_mf in num_disc_mfs:
            color = clist.__next__()['color']
            linestyle = linestyle_cycler.__next__()['linestyle']
            plot_vals = []
            plot_vals_2 = []
            try:
                config = args_parser.generate_config_from_kw(game=game, variant=variant, fp_iterations=100 if variant == 'fpi' else 1000,
                                                             num_agents=1000, num_disc_mf=num_disc_mf, inf=stationary)
                files = find('stdout', config['exp_dir'])

                with open(max(files, key=os.path.getctime), 'r') as fi:
                    fi_lines = fi.readlines()
                    for line in fi_lines[:]:
                        fields = line.split(" ")
                        plot_vals.append(float(fields[4][:-1 if fields[4][-1] == ',' else len(fields[4])]))
                        plot_vals_2.append(float(fields[7][:-1 if fields[7][-1] == ',' else len(fields[7])]))

                # subplot.loglog(range(len(plot_vals))[::skip_n], plot_vals[::skip_n], linestyle, color=color,
                #              label=f"M={num_disc_mf}", alpha=0.5, linewidth=2)
                subplot.loglog(range(len(plot_vals_2))[::skip_n], plot_vals_2[::skip_n], linestyle, color=color,
                             label=f"M={num_disc_mf}", alpha=0.5, linewidth=2)
            except Exception as e:
                print(f"FAILED TO MAKE SUBPLOT: {e}")

        # if i%3==1:
        #     lgd1 = plt.legend(loc="upper right")
        # plt.title(game + " " + variant)
        plt.grid('on')
        # plt.xlabel(r'Iteration $n$', fontsize=22)
        if i%3==2:
            plt.ylabel(r'$\hat{\mathcal E}$', fontsize=22)
        plt.xlim([0, len(plot_vals)])
        subplot.loglog([0, len(plot_vals)-1], [0, 0], linestyle, color=color,
                     label="__nolabel__", alpha=0.0, linewidth=0.2)
        plt.xscale('symlog')
        # plt.yscale('symlog')


    for game, variant in zip(games, variants):

        clist = itertools.cycle(cycler(color='rbkgcmy'))
        linestyle_cycler = itertools.cycle(cycler('linestyle', ['-', '--', ':', '-.']))
        subplot = plt.subplot(2, 3, i)
        subplot.annotate('(' + string.ascii_lowercase[i - 1] + ')',
                         (0, 0),
                         xytext=(10, +32),
                         xycoords='axes fraction',
                         textcoords='offset points',
                         fontweight='bold',
                         color='black',
                         alpha=0.7,
                         backgroundcolor='white',
                         ha='left', va='top')
        # subplot.text(-0.01, 1.06, '(' + string.ascii_lowercase[i - 1] + ')', transform=subplot.transAxes, weight='bold')
        i += 1

        labels = []
        for num_disc_mf in num_disc_mfs:
            color = clist.__next__()['color']
            linestyle = linestyle_cycler.__next__()['linestyle']
            plot_vals = []
            plot_vals_2 = []
            try:
                config = args_parser.generate_config_from_kw(game=game, variant=variant, fp_iterations=100 if variant == 'fpi' else 1000,
                                                             num_agents=1000, num_disc_mf=num_disc_mf, inf=stationary)
                files = find('stdout', config['exp_dir'])

                with open(max(files, key=os.path.getctime), 'r') as fi:
                    fi_lines = fi.readlines()
                    for line in fi_lines[:]:
                        fields = line.split(" ")
                        plot_vals.append(float(fields[4][:-1 if fields[4][-1] == ',' else len(fields[4])]))
                        plot_vals_2.append(float(fields[7][:-1 if fields[7][-1] == ',' else len(fields[7])]))

                subplot.loglog(range(len(plot_vals))[::skip_n], plot_vals[::skip_n], linestyle, color=color,
                             label=f"M={num_disc_mf}", alpha=0.5, linewidth=2)
                # subplot.loglog(range(len(plot_vals_2))[::skip_n], plot_vals_2[::skip_n], linestyle, color=color,
                #              label=f"M={num_disc_mf}", alpha=0.5, linewidth=2)
                labels.append(f"M={num_disc_mf}")
            except Exception as e:
                print(f"FAILED TO MAKE SUBPLOT: {e}")

        if i%3==0:
            lgd1 = fig.legend(labels, loc='upper center', bbox_to_anchor=(0.525, 1.07), ncol=3, fontsize="20")
        # plt.title(game + " " + variant)
        plt.grid('on')
        plt.xlabel(r'Iteration $n$', fontsize=22)
        if i%3==2:
            plt.ylabel(r'$\hat{\mathcal E}^0$', fontsize=22)
        plt.xlim([0, len(plot_vals)])
        subplot.loglog([0, len(plot_vals)-1], [0, 0], linestyle, color=color,
                     label="__nolabel__", alpha=0.0, linewidth=0.2)
        # plt.ylim([0, None])
        plt.xscale('symlog')
        # if i%3==2:
        #     plt.yscale('symlog', linthresh=1e-0)

    """ Finalize plot """
    plt.gcf().set_size_inches(13, 6)
    plt.tight_layout(w_pad=0.0)
    plt.savefig(f'./figures/inf_exploitability.pdf', bbox_inches='tight', transparent=True, pad_inches=0.1)
    plt.savefig(f'./figures/inf_exploitability.png', bbox_inches='tight', transparent=True, pad_inches=0.1)
    plt.show()


if __name__ == '__main__':
    plot()
